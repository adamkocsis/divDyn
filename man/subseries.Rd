% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subSeries.R
\name{subseries}
\alias{subseries}
\title{Serial subsampling wrapper function}
\usage{
subseries(dat, FUN = "divDyn", q, iter = 10, bin = "SLC", intact = NULL,
  tax = "genus", duplicates = FALSE, coll = "collection_no",
  output = "arit", implement = "for", method = "cr", ...)
}
\arguments{
\item{dat}{(data.frame): Occurrence dataset.}

\item{FUN}{The function to be iteratively executed during the subsampling trials. IF set to NULL, no function will be executed, and the subsampled datasets will be returned as a list. If set to the default "divDyn", the divDyn(), function will be run with default settings. The function should be defined with a single argument, the database subset resulting from a trial.}

\item{q}{(numeric value): Subsampling level argument. Depends on the subsampling function. This is mandatory argument.}

\item{iter}{(numeric value): The number of iterations to be executed.}

\item{bin}{(character value): The name of the subsetting variable (has to be numeric). For time series, this is the time-slice variable.}

\item{intact}{(numeric vector): The bins, which will not be subsampled but will be added to the subsampling trials. Negative values will be treated as indications on which bins to omit. If the number of occurrences does not reach the subsampling quota, by default it will not be represented in the subsampling trials. You can force their inclusion with the intact argument.}

\item{tax}{(character value): The name of the taxon variable.}

\item{duplicates}{(logical value): Toggles whether multiple entries from the same taxon ("tax") and collection ("coll") variables should be omitted. Useful for omitting occurrences of multiple species-level occurrences of the same genus.}

\item{coll}{(character value): the variable name of the collection identifiers.}

\item{output}{(character value): If the function output are vectors or matrices, the 'arit' and 'geom' values will trigger simple averaging with arithmetic or geometric means. If the function output of a single trial is again a vector or a matrix, setting the output to 'dist' will return the calculated results of every trial, organized in a list of independent variables (e.g. if the function output is value, the return will contain a list vectors, if it is a vector, the output will be a list of vectors, if the function output is a data.frame, the output will be a list of matrices). If output="list", the structure of the original function output will be retained, and the results of the individual trials will be concatenated to a list.}

\item{implement}{(character value): Either "lapply", "for" or "foreach". The iterator function of the subsampling trials. Use "lapply" for speed, but this may result in memory issues. Currently only the "for" implementation works.}

\item{method}{(character value): The type of subsampling to be implemented. By default this is classical rarefaction ("cr"). "oxw" stands for occurrence weighted by list subsampling.}

\item{...}{arguments passed to the method-specific subsampling functions.}
}
\description{
The function will take a desired function that takes an occurrence dataset as an argument, and reruns it iteratively on its subsets.
}
\details{
The procedure of 'subsampling' or 'sampling standarization' has to be applied in cases 
In paleontological questions...

The function is used to test whether a specific statement holds when sampling standardization is applied. The procedure calculates the variables in question given a certain sampling standardization and routine and level.
Â§more
}
\examples{

data(scleractinia)
data(stages)
# Example 1-calculate metrics of diversity dynamics
  dd <- divDyn(scleractinia, tax="genus", bin="slc")
  rarefDD<-subseries(scleractinia,iter=50, q=50,
  tax="genus", bin="slc", output="dist", intact=95)
	
# plotting
  plotTS(stages, shading="series", boxes="per", xlim=c(260,0), 
  ylab="range-through diversity (genera)", ylim=c(0,230))
  lines(stages$mid, dd$divRT, lwd=2)
  shades(stages$mid, rarefDD$divRT, col="blue")
  legend("topleft", legend=c("raw","rarefaction"),
    col=c("black", "blue"), lwd=c(2,2), bg="white")
  
  # compare with previous function (will be obsolete)
  rarefDD <- crDD(scleractinia, quota=50, iter=100, intactBins=95)
  lines(stages$mid,rarefDD$divRT, col="red", lwd=2)
  
  
# Example 2-SIB diversity
# draft a simple function to calculate SIB diversity
sib<-function(x){
  tapply(INDEX=x$slc, X=x$genus, function(y){
    length(levels(factor(y)))
  })
}
sibDiv<-sib(scleractinia)

# calculate it with subsampling
rarefSIB<-subseries(scleractinia,iter=50, q=50,
  tax="genus", bin="slc", output="arit", intact=95, FUN=sib)

# Example 3 - different subsampling methods with default function (divDyn)
# compare different subsampling types
  # classical rarefaction
  cr<-subseries(scleractinia,iter=100, q=20,tax="genus", bin="slc", output="dist", intact=95)
  # by-list subsampling (unweighted) - 3 collections
  UW<-subseries(scleractinia,iter=100, q=3,tax="genus", bin="slc", output="dist", intact=95, method="oxw", x=0)
  # occurrence weighted by list subsampling
  OW<-subseries(scleractinia,iter=100, q=20,tax="genus", bin="slc", output="dist", intact=95, method="oxw", x=1)
 
# plot
  plotTS(stages, shading="series", boxes="per", xlim=c(260,0), 
  ylab="range-through diversity (genera)", ylim=c(0,100))
  shades(stages$mid, cr$divRT, col="red")
  shades(stages$mid, UW$divRT, col="blue")
  shades(stages$mid, OW$divRT, col="green")
  
  legend("topleft", bg="white", legend=c("CR (20)", "UW (3)", "OW (20)"), 
    col=c("red", "blue", "green"), lty=c(1,1,1), lwd=c(2,2,2))

}
